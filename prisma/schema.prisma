// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  role          ROLE      @default(CLIENT)
  name          String?
  lastname      String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  image         String?
  phoneNumber   String?   @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  prescriptions Prescription[]
  accounts     Account[]
  sessions     Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analysis {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  primary_sample    String
  recipent          String
  days_for_delivery String
  price             Int?
  conditions        String
  categoryId        String @db.ObjectId

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  analyses Analysis[]
}

model Prescription {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  tests Test[]
}

model Test {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  prescriptionId String @db.ObjectId

  prescription Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  results TestResult[]
}

model TestResult {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  testId String @db.ObjectId
  name   String
  value  String

  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)
}

enum ROLE {
  CLIENT
  RECEPTIONIST
  LABORATORY_ANALYST
}
